plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

import java.util.Properties

// Load local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '95'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '0.95'

// Load keystore properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Fallback to environment variables if missing
keystoreProperties.setProperty('storePassword', keystoreProperties.getProperty('storePassword') ?: System.getenv('OPENWRT_MANAGER_KEY_STORE_PASSWORD') ?: "")
keystoreProperties.setProperty('keyPassword', keystoreProperties.getProperty('keyPassword') ?: System.getenv('OPENWRT_MANAGER_KEY_PASSWORD') ?: "")
keystoreProperties.setProperty('keyAlias', keystoreProperties.getProperty('keyAlias') ?: System.getenv('OPENWRT_MANAGER_ALIAS') ?: "")
keystoreProperties.setProperty('storeFile', keystoreProperties.getProperty('storeFile') ?: System.getenv('OPENWRT_MANAGER_KEY_PATH') ?: "")

android {
    namespace 'com.hg.openwrtmanager'
    compileSdkVersion 35

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.hg.openwrtmanager"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            if (keystoreProperties['storeFile']) {
                storeFile file(keystoreProperties['storeFile'])
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
